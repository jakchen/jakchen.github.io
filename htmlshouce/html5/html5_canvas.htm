<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
<meta name="author" content="colinivy" />
<link href="../global.css" rel="stylesheet" type="text/css" media="screen" />
<title>HTML 5 <canvas> 标签</title>
</head>
<body>
<div id=maincontent>
<h1>HTML 5 &lt;canvas&gt; 标签</h1>
<div>
<h2>定义和用法</h2>
<p>&lt;canvas&gt; 标签定义图形，比如图表和其他图像。</p></div>
<div>
<h2>HTML 4.01 与 HTML 5 之间的差异</h2>
<p>&lt;canvas&gt; 标签是 HTML 5 中的新标签。</p></div>
<div>
<h2>&lt;canvas&gt; 的历史</h2>
<p>这个 HTML 元素是为了客户端矢量图形而设计的。它自己没有行为，但却把一个绘图 API 展现给客户端 JavaScript 
以使脚本能够把想绘制的东西都绘制到一块画布上。</p>
<p>&lt;canvas&gt; 标记由 Apple 在 Safari 1.3 Web 浏览器中引入。对 HTML 的这一根本扩展的原因在于，HTML 在 
Safari 中的绘图能力也为 Mac OS X 桌面的 Dashboard 组件所使用，并且 Apple 希望有一种方式在 Dashboard 
中支持脚本化的图形。</p>
<p>Firefox 1.5 和 Opera 9 都跟随了 Safari 的引领。这两个浏览器都支持 &lt;canvas&gt; 标记。</p>
<p>我们甚至可以在 IE 中使用 &lt;canvas&gt; 标记，并在 IE 的 VML 支持的基础上用开源的 JavaScript 代码（由 
Google 发起）来构建兼容性的画布。参见：<a title=ExplorerCanvas 
href="http://excanvas.sourceforge.net/">http://excanvas.sourceforge.net/</a>。</p>
<p>&lt;canvas&gt; 的标准化的努力由一个 Web 浏览器厂商的非正式协会在推进，目前 &lt;canvas&gt; 已经成为 HTML 5 
草案中一个正式的标签。参见：<a title="HTML 5" 
href="http://www.whatwg.org/specs/web-apps/current-work/">http://www.whatwg.org/specs/web-apps/current-work/</a></p></div>
<div>
<h2>&lt;canvas&gt; 标记和 SVG 以及 VML 之间的差异</h2>
<p>&lt;canvas&gt; 标记和 SVG 以及 VML 之间的一个重要的不同是，&lt;canvas&gt; 有一个基于 JavaScript 的绘图 
API，而 SVG 和 VML 使用一个 XML 文档来描述绘图。</p>
<p>这两种方式在功能上是等同的，任何一种都可以用另一种来模拟。从表面上看，它们很不相同，可是，每一种都有强项和弱点。例如，SVG 
绘图很容易编辑，只要从其描述中移除元素就行。</p>
<p>要从同一图形的一个 &lt;canvas&gt; 标记中移除元素，往往需要擦掉绘图重新绘制它。</p></div>
<div>
<h2>如何使用 &lt;canvas&gt; 标记绘图</h2>
<p>大多数 Canvas 绘图 API 都没有定义在 &lt;canvas&gt; 元素本身上，而是定义在通过画布的 <a 
title="HTML DOM getContext() 方法" 
href="http://t.mb5u.com/htmldom/met_canvas_getcontext.htm">getContext() 方法</a>获得的一个“绘图环境”对象上。</p>
<p>Canvas API 也使用了路径的表示法。但是，路径由一系列的方法调用来定义，而不是描述为字母和数字的字符串，比如调用 beginPath() 和 
arc() 方法。</p>
<p>一旦定义了路径，其他的方法，如 fill()，都是对此路径操作。绘图环境的各种属性，比如 fillStyle，说明了这些操作如何使用。</p>
<P class=note><SPAN>注释：</SPAN>Canvas API 非常紧凑的一个原因上它没有对绘制文本提供任何支持。要把文本加入到一个 
&lt;canvas&gt; 图形，必须要么自己绘制它再用位图图像合并它，或者在 &lt;canvas&gt; 上方使用 CSS 定位来覆盖 HTML 
文本。</p></div>
<div>
<h2>例子：</h2><pre>&lt;script type="text/javascript"&gt;
function drawCanvas()
{
var canvas=document.getElementById('myCanvas');
var ctx=canvas.getContext('2d');
ctx.fillStyle='#FF0000';
ctx.fillRect(0,0,80,100);
}
&lt;/script&gt;
...


&lt;canvas id="myCanvas"&gt;
your browser does not support the canvas tag
&lt;/canvas&gt;
</pre></div>
<div>
<h2>属性</h2>
<table class=dataintable>
  <tbody>
  <tr>
    <th>属性</th>
    <th>值</th>
    <th>描述</th></tr>
  <tr>
    <td>height</td>
    <td><I>pixels</I></td>
    <td>设置 canvas 的高度。</td></tr>
  <tr>
    <td>width</td>
    <td><I>pixels</I></td>
    <td>设置 canvas 的宽度。</td></tr></tbody></table>
<h3>标准属性</h3><pre>class, contenteditable, contextmenu, dir, draggable, id, irrelevant, 
lang, ref, registrationmark, tabindex, template, title</pre>
<p>如需完整的描述，请访 <a href="html5_ref_standardattributes.htm">HTML 5 中标准属性</a>。</p>
<h3>事件属性</h3><pre>onabort, onbeforeunload, onblur, onchange, onclick, oncontextmenu, 
ondblclick, ondrag, ondragend, ondragenter, ondragleave, ondragover, 
ondragstart, ondrop, onerror, onfocus, onkeydown, onkeypress, onkeyup, 
onload, onmessage, onmousedown, onmousemove, onmouseover, onmouseout, 
onmouseup, onmousewheel, onresize, onscroll, onselect, onsubmit, onunload
</pre>
<p>如需完整的描述，请访 <a href="html5_ref_eventattributes.htm">HTML 5 
中事件属性</a>。</p></div>
<div>
<h2>参阅</h2>
<p><a title="HTML DOM Canvas 对象" href="http://t.mb5u.com/htmldom/dom_obj_canvas.htm">HTML DOM 
Canvas 对象</a></p></div></div>

</body></html>
