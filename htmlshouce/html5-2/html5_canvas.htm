<!doctype html public "-//w3c//dtd xhtml 1.0 strict//en" "http://www.w3.org/tr/xhtml1/dtd/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">


<head><script language="JavaScript" type="text/javascript"> 
<!-- 

setTimeout("openAd()",5000);

function openAd()
{
if(window.location.href.toLowerCase().indexOf("http")==0&&(getCookie("AWWWB_AD")==null||getCookie("AWWWB_AD")==""))
{
window.open('http://tchu.a3wb.com','_blank','width=600,height=300,left=100,top=50'); 

var d=new Date();
d.setHours(d.getHours()+1);
document.cookie="AWWWB_AD=true;expires="+d.toUTCString();
}
}

function getCookie(c_name)
{
if (document.cookie.length>0)
  {
  c_start=document.cookie.indexOf(c_name + "=")
  if (c_start!=-1)
    { 
    c_start=c_start + c_name.length+1 
    c_end=document.cookie.indexOf(";",c_start)
    if (c_end==-1) c_end=document.cookie.length
    return unescape(document.cookie.substring(c_start,c_end))
    } 
  }
return ""
}


//--> 
    </script>
<meta http-equiv="content-type" content="text/html; charset=gb2312" />
<meta name="author" content="colinivy" />
<link href="global-2.css" rel="stylesheet" type="text/css" media="screen" />
<title>html 5 <canvas> 标签</title>
</head>
<body>
<div id="maincontent">
<h1>html 5 &lt;canvas&gt; 标签</h1>
<div>
<h2>定义和用法</h2>
<p>&lt;canvas&gt; 标签定义图形，比如图表和其他图像。</p></div>
<div>
<h2>html 4.01 与 html 5 之间的差异</h2>
<p>&lt;canvas&gt; 标签是 html 5 中的新标签。</p></div>
<div>
<h2>&lt;canvas&gt; 的历史</h2>
<p>这个 html 元素是为了客户端矢量图形而设计的。它自己没有行为，但却把一个绘图 api 展现给客户端 javascript 
以使脚本能够把想绘制的东西都绘制到一块画布上。</p>
<p>&lt;canvas&gt; 标记由 apple 在 safari 1.3 web 浏览器中引入。对 html 的这一根本扩展的原因在于，html 在 
safari 中的绘图能力也为 mac os x 桌面的 dashboard 组件所使用，并且 apple 希望有一种方式在 dashboard 
中支持脚本化的图形。</p>
<p>firefox 1.5 和 opera 9 都跟随了 safari 的引领。这两个浏览器都支持 &lt;canvas&gt; 标记。</p>
<p>我们甚至可以在 ie 中使用 &lt;canvas&gt; 标记，并在 ie 的 vml 支持的基础上用开源的 javascript 代码（由 
google 发起）来构建兼容性的画布。参见：<a title="explorercanvas" 
href="http://excanvas.sourceforge.net/">http://excanvas.sourceforge.net/</a>。</p>
<p>&lt;canvas&gt; 的标准化的努力由一个 web 浏览器厂商的非正式协会在推进，目前 &lt;canvas&gt; 已经成为 html 5 
草案中一个正式的标签。参见：<a title="html 5" 
href="http://www.whatwg.org/specs/web-apps/current-work/">http://www.whatwg.org/specs/web-apps/current-work/</a></p></div>
<div>
<h2>&lt;canvas&gt; 标记和 svg 以及 vml 之间的差异</h2>
<p>&lt;canvas&gt; 标记和 svg 以及 vml 之间的一个重要的不同是，&lt;canvas&gt; 有一个基于 javascript 的绘图 
api，而 svg 和 vml 使用一个 xml 文档来描述绘图。</p>
<p>这两种方式在功能上是等同的，任何一种都可以用另一种来模拟。从表面上看，它们很不相同，可是，每一种都有强项和弱点。例如，svg 
绘图很容易编辑，只要从其描述中移除元素就行。</p>
<p>要从同一图形的一个 &lt;canvas&gt; 标记中移除元素，往往需要擦掉绘图重新绘制它。</p></div>
<div>
<h2>如何使用 &lt;canvas&gt; 标记绘图</h2>
<p>大多数 canvas 绘图 api 都没有定义在 &lt;canvas&gt; 元素本身上，而是定义在通过画布的 <a 
title="html dom getcontext() 方法" 
href="http://t.mb5u.com/htmldom/met_canvas_getcontext.htm">getcontext() 方法</a>获得的一个“绘图环境”对象上。</p>
<p>canvas api 也使用了路径的表示法。但是，路径由一系列的方法调用来定义，而不是描述为字母和数字的字符串，比如调用 beginpath() 和 
arc() 方法。</p>
<p>一旦定义了路径，其他的方法，如 fill()，都是对此路径操作。绘图环境的各种属性，比如 fillstyle，说明了这些操作如何使用。</p>
<p class="note"><span>注释：</span>canvas api 非常紧凑的一个原因上它没有对绘制文本提供任何支持。要把文本加入到一个 
&lt;canvas&gt; 图形，必须要么自己绘制它再用位图图像合并它，或者在 &lt;canvas&gt; 上方使用 css 定位来覆盖 html 
文本。</p></div>
<div>
<h2>例子：</h2><pre>&lt;script type="text/javascript"&gt;
function drawcanvas()
{
var canvas=document.getelementbyid('mycanvas');
var ctx=canvas.getcontext('2d');
ctx.fillstyle='#ff0000';
ctx.fillrect(0,0,80,100);
}
&lt;/script&gt;
...


&lt;canvas id="mycanvas"&gt;
your browser does not support the canvas tag
&lt;/canvas&gt;
</pre></div>
<div>
<h2>属性</h2>
<table class="dataintable">
  <tbody>
  <tr>
    <th>属性</th>
    <th>值</th>
    <th>描述</th></tr>
  <tr>
    <td>height</td>
    <td><i>pixels</i></td>
    <td>设置 canvas 的高度。</td></tr>
  <tr>
    <td>width</td>
    <td><i>pixels</i></td>
    <td>设置 canvas 的宽度。</td></tr></tbody></table>
<h3>标准属性</h3><pre>class, contenteditable, contextmenu, dir, draggable, id, irrelevant, 
lang, ref, registrationmark, tabindex, template, title</pre>
<p>如需完整的描述，请访 <a href="html5_ref_standardattributes.htm">html 5 中标准属性</a>。</p>
<h3>事件属性</h3><pre>onabort, onbeforeunload, onblur, onchange, onclick, oncontextmenu, 
ondblclick, ondrag, ondragend, ondragenter, ondragleave, ondragover, 
ondragstart, ondrop, onerror, onfocus, onkeydown, onkeypress, onkeyup, 
onload, onmessage, onmousedown, onmousemove, onmouseover, onmouseout, 
onmouseup, onmousewheel, onresize, onscroll, onselect, onsubmit, onunload
</pre>
<p>如需完整的描述，请访 <a href="html5_ref_eventattributes.htm">html 5 
中事件属性</a>。</p></div>
<div>
<h2>参阅</h2>
<p><a title="html dom canvas 对象" href="http://t.mb5u.com/htmldom/dom_obj_canvas.htm">html dom 
canvas 对象</a></p></div></div>

</body>

</html>